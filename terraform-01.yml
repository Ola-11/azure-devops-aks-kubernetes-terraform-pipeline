

trigger:
- master

pool:
  name: 'AppPool'

# Define Variables for Enviroments
variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIROMENT
  value: qa


# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
stages:
  - stage: Setup
    jobs:
      - job: RegisterProvider
        displayName: Register Container Services
        steps:
        - task: AzureCLI@2
          displayName: 'Register Microsoft.ContainerService'
          inputs:
            azureSubscription: 'terraform-aks-azurerm-szc-con'
            scriptType: 'batch'
            scriptLocation: 'inlineScript'
            inlineScript: 'az provider register --namespace Microsoft.ContainerService'

        - task: AzureCLI@2
          displayName: 'Verify Registration'
          inputs:
            azureSubscription: 'terraform-aks-azurerm-szc-con'
            scriptType: 'batch'
            scriptLocation: 'inlineScript'
            inlineScript: |
              status=$(az provider show --namespace Microsoft.ContainerService --query "registrationState" -o tsv)
              if [ "$status" != "Registered" ]; then
                echo "Microsoft.ContainerService is not registered. Exiting."
                exit 1
              fi


  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish Artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline'

## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)

        - task: TerraformInstaller@1
          displayName: Install Terraform
          inputs:
            terraformVersion: 'latest'


## Step-3: Validate Terraform Manifests (terraform init, terraform validate)
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            backendAzureRmUseEnvironmentVariablesForAuthentication: false
            backendAzureRmUseEntraIdForAuthentication: false
            backendServiceArm: 'terraform-aks-azurerm-szc-con'
            backendAzureRmResourceGroupName: 'RG_AKS_project'
            backendAzureRmStorageAccountName: 'stracctaksproject'
            backendAzureRmContainerName: 'strgterraform'
            backendAzureRmKey: 'aks-base-tfst'
            
        - task: TerraformTaskV4@4
          displayName: Terraform Validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'

# Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step)

  - stage: DeployAKSClusters
    jobs:
      - deployment: DeployDevAKSCluster
        displayName: DeployDevAKSCluster
        pool: 
          name: 'AppPool'
        environment: $(DEV_ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:

                - task: DownloadSecureFile@1
                  displayName: Download SSH Key
                  name: sshkey
                  inputs:
                    secureFile: 'aks-terraform-devops-ssh-key-ubuntu.pub'
                - task: TerraformTaskV4@4
                  displayName: Terraform init
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    commandOptions: '-reconfigure'
                    backendServiceArm: 'terraform-aks-azurerm-szc-con'
                    backendAzureRmResourceGroupName: 'RG_AKS_project'
                    backendAzureRmStorageAccountName: 'stracctaksproject'
                    backendAzureRmContainerName: 'strgterraform'
                    backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                - task: TerraformTaskV4@4
                  displayName: Terraform Plan
                  inputs:
                    provider: 'azurerm'
                    command: 'plan'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    environmentServiceNameAzureRM: 'terraform-aks-azurerm-szc-con'
                - task: TerraformTaskV4@4
                  displayName: Terraform Apply
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    environmentServiceNameAzureRM: 'terraform-aks-azurerm-szc-con'